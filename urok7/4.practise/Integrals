import java.util.function.DoubleFunction;
import java.util.concurrent.*;
import java.util.concurrent.atomic.DoubleAdder;
import java.lang.Thread;

public class Integrals {
    public static final int STEPS = 10000000;
    public static final int TASKS = 10; // Runtime.getRuntime().availableProcessors();

    public static double singleThread(DoubleFunction <Double> f, double a, double b){

        return singleThread(f, a, b, STEPS);
    }
    static double singleThread(DoubleFunction <Double> f, double a, double b, int steps){
        double h = (b-a)/ steps;
        double summa = 0d;

        for (int i = 0; i < steps; i++){
            double x = a + h*i + h/2;
            double y = f.apply(x);
            summa += y * h;
        }
        return summa;
    }

    public static double multiThread(DoubleFunction <Double> f, double a, double b) throws InterruptedException, ExecutionException {
        ExecutorService pool = Executors.newFixedThreadPool(TASKS); // Executors.newWorkingStealingPool();

        double hx = (b-a) / TASKS;
        Future <Double> [] tasks = new Future[TASKS];
        for (int i = 0; i < TASKS; i++){
            final double ax = a + i * hx;
            final double bx = ax + hx;
            tasks [i] = pool.submit( () -> Integrals.singleThread(f, ax, bx, STEPS/TASKS));
        }
        double summa = 0d;
        for(Future <Double> t : tasks)
            summa += t.get();

        pool.shutdown();

        return summa;
    }

    public static double multiThread2(DoubleFunction <Double> f, double a, double b) throws InterruptedException {
        double hx = (b-a) / TASKS;
        Thread[] threads = new Thread[TASKS];
        DoubleAdder r = new DoubleAdder();
        for(int i = 0; i < TASKS; i++){
            final double ax = a + i * hx;
            final double bx = ax + hx;
            threads[i] = new Thread( () -> {
                double rx = Integrals.singleThread(f, ax, bx, STEPS/TASKS);
                r.add(rx);
            });
            threads[i].start();
        }

        for(Thread t : threads) t.join();
        return r.sum();
    }

}
